/*
 * generated by Xtext 2.20.0
 */
package uk.juliusz.generateme.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uk.juliusz.generateme.generateMe.Config;
import uk.juliusz.generateme.generateMe.ContactUsPage;
import uk.juliusz.generateme.generateMe.ContentPage;
import uk.juliusz.generateme.generateMe.GalleryPage;
import uk.juliusz.generateme.generateMe.GenerateMePackage;
import uk.juliusz.generateme.generateMe.GenerateMeProgram;
import uk.juliusz.generateme.generateMe.HomePage;
import uk.juliusz.generateme.generateMe.Photo;
import uk.juliusz.generateme.services.GenerateMeGrammarAccess;

@SuppressWarnings("all")
public class GenerateMeSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GenerateMeGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GenerateMePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GenerateMePackage.CONFIG:
				sequence_Config(context, (Config) semanticObject); 
				return; 
			case GenerateMePackage.CONTACT_US_PAGE:
				sequence_ContactUsPage(context, (ContactUsPage) semanticObject); 
				return; 
			case GenerateMePackage.CONTENT_PAGE:
				sequence_ContentPage(context, (ContentPage) semanticObject); 
				return; 
			case GenerateMePackage.GALLERY_PAGE:
				sequence_GalleryPage(context, (GalleryPage) semanticObject); 
				return; 
			case GenerateMePackage.GENERATE_ME_PROGRAM:
				sequence_GenerateMeProgram(context, (GenerateMeProgram) semanticObject); 
				return; 
			case GenerateMePackage.HOME_PAGE:
				sequence_HomePage(context, (HomePage) semanticObject); 
				return; 
			case GenerateMePackage.PHOTO:
				sequence_Photo(context, (Photo) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Config returns Config
	 *
	 * Constraint:
	 *     (businessName=STRING sender=STRING author=STRING)
	 */
	protected void sequence_Config(ISerializationContext context, Config semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GenerateMePackage.Literals.CONFIG__BUSINESS_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GenerateMePackage.Literals.CONFIG__BUSINESS_NAME));
			if (transientValues.isValueTransient(semanticObject, GenerateMePackage.Literals.CONFIG__SENDER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GenerateMePackage.Literals.CONFIG__SENDER));
			if (transientValues.isValueTransient(semanticObject, GenerateMePackage.Literals.CONFIG__AUTHOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GenerateMePackage.Literals.CONFIG__AUTHOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigAccess().getBusinessNameSTRINGTerminalRuleCall_1_0(), semanticObject.getBusinessName());
		feeder.accept(grammarAccess.getConfigAccess().getSenderSTRINGTerminalRuleCall_3_0(), semanticObject.getSender());
		feeder.accept(grammarAccess.getConfigAccess().getAuthorSTRINGTerminalRuleCall_5_0(), semanticObject.getAuthor());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Pages returns ContactUsPage
	 *     ContactUsPage returns ContactUsPage
	 *
	 * Constraint:
	 *     (name=ID content=STRING)
	 */
	protected void sequence_ContactUsPage(ISerializationContext context, ContactUsPage semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GenerateMePackage.Literals.PAGES__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GenerateMePackage.Literals.PAGES__NAME));
			if (transientValues.isValueTransient(semanticObject, GenerateMePackage.Literals.CONTACT_US_PAGE__CONTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GenerateMePackage.Literals.CONTACT_US_PAGE__CONTENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContactUsPageAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getContactUsPageAccess().getContentSTRINGTerminalRuleCall_4_0(), semanticObject.getContent());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Pages returns ContentPage
	 *     ContentPage returns ContentPage
	 *
	 * Constraint:
	 *     (name=ID content=STRING)
	 */
	protected void sequence_ContentPage(ISerializationContext context, ContentPage semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GenerateMePackage.Literals.PAGES__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GenerateMePackage.Literals.PAGES__NAME));
			if (transientValues.isValueTransient(semanticObject, GenerateMePackage.Literals.CONTENT_PAGE__CONTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GenerateMePackage.Literals.CONTENT_PAGE__CONTENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContentPageAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getContentPageAccess().getContentSTRINGTerminalRuleCall_4_0(), semanticObject.getContent());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Pages returns GalleryPage
	 *     GalleryPage returns GalleryPage
	 *
	 * Constraint:
	 *     (name=ID photos+=Photo)
	 */
	protected void sequence_GalleryPage(ISerializationContext context, GalleryPage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GenerateMeProgram returns GenerateMeProgram
	 *
	 * Constraint:
	 *     (config=Config homePage=HomePage pages+=Pages*)
	 */
	protected void sequence_GenerateMeProgram(ISerializationContext context, GenerateMeProgram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HomePage returns HomePage
	 *
	 * Constraint:
	 *     (content=STRING Introduction=STRING)
	 */
	protected void sequence_HomePage(ISerializationContext context, HomePage semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GenerateMePackage.Literals.HOME_PAGE__CONTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GenerateMePackage.Literals.HOME_PAGE__CONTENT));
			if (transientValues.isValueTransient(semanticObject, GenerateMePackage.Literals.HOME_PAGE__INTRODUCTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GenerateMePackage.Literals.HOME_PAGE__INTRODUCTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHomePageAccess().getContentSTRINGTerminalRuleCall_2_0(), semanticObject.getContent());
		feeder.accept(grammarAccess.getHomePageAccess().getIntroductionSTRINGTerminalRuleCall_4_0(), semanticObject.getIntroduction());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Photo returns Photo
	 *
	 * Constraint:
	 *     (photoTitle=STRING description=STRING fileName=STRING)
	 */
	protected void sequence_Photo(ISerializationContext context, Photo semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GenerateMePackage.Literals.PHOTO__PHOTO_TITLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GenerateMePackage.Literals.PHOTO__PHOTO_TITLE));
			if (transientValues.isValueTransient(semanticObject, GenerateMePackage.Literals.PHOTO__DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GenerateMePackage.Literals.PHOTO__DESCRIPTION));
			if (transientValues.isValueTransient(semanticObject, GenerateMePackage.Literals.PHOTO__FILE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GenerateMePackage.Literals.PHOTO__FILE_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPhotoAccess().getPhotoTitleSTRINGTerminalRuleCall_1_0(), semanticObject.getPhotoTitle());
		feeder.accept(grammarAccess.getPhotoAccess().getDescriptionSTRINGTerminalRuleCall_4_0(), semanticObject.getDescription());
		feeder.accept(grammarAccess.getPhotoAccess().getFileNameSTRINGTerminalRuleCall_6_0(), semanticObject.getFileName());
		feeder.finish();
	}
	
	
}
